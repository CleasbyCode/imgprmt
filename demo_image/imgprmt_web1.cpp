//  imgprmt v1.2 (Linux / Windows CLI Edition). Created by Nicholas Cleasby (@CleasbyCode) 19/05/2023

// Compile program (Linux):

// $ sudo apt-get install libturbojpeg0-dev

// $ chmod +x compile_imgprmt.sh
// $ ./compile_imgprmt.sh
	
// $ Compilation successful. Executable 'imgprmt' created.
// $ sudo cp imgprmt /usr/bin
// $ imgprmt

#include <turbojpeg.h>

// This software is based in part on the work of the Independent JPEG Group.
// Copyright (C) 2009-2024 D. R. Commander. All Rights Reserved.
// Copyright (C) 2015 Viktor Szathmáry. All Rights Reserved.
// https://github.com/libjpeg-turbo/libjpeg-turbo

#include <cstddef>
#include <stdexcept>
#include <string_view>
#include <cstdint>
#include <optional>
#include <span>
#include <initializer_list>
#include <iostream>
#include <fstream>
#include <filesystem>
#include <array>
#include <algorithm>
#include <random>

namespace fs = std::filesystem;

enum class Option : unsigned char { None, Bluesky};

struct ProgramArgs {
	Option option{Option::None};

	fs::path image_file_path;
	fs::path prompt_file_path;
	fs::path url_file_path;
    
	static ProgramArgs parse(int argc, char** argv) {
		using std::string_view;

        auto arg = [&](int i) -> string_view {
		return (i >= 0 && i < argc) ? string_view(argv[i]) : string_view{};
        };

        auto die = [&]() -> void {
        	throw std::runtime_error("Error");
        };

        if (argc < 4 || argc > 5) die();

        ProgramArgs out{};

	int i = 1;

        if (arg(i) == "-b") {
        	out.option = Option::Bluesky;  
        	++i;
        }

        out.image_file_path = fs::path(arg(i)); 
        out.prompt_file_path = fs::path(arg(++i));
        out.url_file_path = fs::path(arg(++i));
        return out;
    }
};

static inline std::optional<size_t> find_sig(const std::vector<uint8_t>& v, std::span<const uint8_t> sig) {
	auto it = std::search(v.begin(), v.end(), sig.begin(), sig.end());
    	if (it == v.end()) return std::nullopt;
    	return static_cast<size_t>(it - v.begin());
}

// Writes updated values, such as segments lengths, index/offsets values, etc. into the relevant vector index location.	
static inline void updateValue(std::vector<uint8_t>& vec, uint32_t insert_index, uint32_t NEW_VALUE, uint8_t bits) {
	while (bits) {
		vec[insert_index++] = (NEW_VALUE >> (bits -= 8)) & 0xFF; // Big-endian.
    	}
}

static inline bool hasValidFilename(const fs::path& p) {
	if (p.empty()) {
    		return false;
	}		
    
    	std::string filename = p.filename().string();
    	if (filename.empty()) {
    		return false;
    	}

    	auto validChar = [](unsigned char c) {
    		return std::isalnum(c) || c == '.' || c == '-' || c == '_' || c == '@' || c == '%';
 	};

    	return std::all_of(filename.begin(), filename.end(), validChar);
}

static inline bool hasFileExtension(const fs::path& p, std::initializer_list<const char*> exts) {
	auto e = p.extension().string();
    	std::transform(e.begin(), e.end(), e.begin(), [](unsigned char c){ return static_cast<char>(std::tolower(c)); });
    	for (const char* cand : exts) {
    		std::string c = cand;
        	std::transform(c.begin(), c.end(), c.begin(), [](unsigned char x){ return static_cast<char>(std::tolower(x)); });
        	if (e == c) return true;
    	}
    	return false;
}

static inline void encode_image(std::vector<uint8_t>& image_file_vec, int& width, int& height, Option option) {
		tjhandle decompressor = tjInitDecompress();
		if (!decompressor) throw std::runtime_error("tjInitDecompress() failed.");

		int jpegSubsamp = 0, jpegColorspace = 0;
		
		if (tjDecompressHeader3(decompressor, image_file_vec.data(), (unsigned long)image_file_vec.size(), &width, &height, &jpegSubsamp, &jpegColorspace) != 0) {
    			tjDestroy(decompressor);
    			throw std::runtime_error(std::string("tjDecompressHeader3: ") + tjGetErrorStr());
		}

		std::vector<uint8_t> decoded_image_vec((size_t)width * (size_t)height * 3);
		if (tjDecompress2(decompressor, image_file_vec.data(), (unsigned long)image_file_vec.size(), decoded_image_vec.data(), width, 0, height, TJPF_RGB, 0) != 0) {
    			tjDestroy(decompressor);
    			throw std::runtime_error(std::string("tjDecompress2: ") + tjGetErrorStr());
		}
		tjDestroy(decompressor);

		const bool isBluesky = (option == Option::Bluesky);
		const int JPG_QUALITY_VAL = isBluesky ? 85 : 97;

		const int subsamp = isBluesky ? TJSAMP_420 : TJSAMP_444;
		int flags = 0;
		if (!isBluesky) flags |= TJFLAG_PROGRESSIVE; 
		
		flags |= (JPG_QUALITY_VAL >= 90 ? TJFLAG_FASTDCT : TJFLAG_ACCURATEDCT);

		tjhandle compressor = tjInitCompress();
		if (!compressor) throw std::runtime_error("tjInitCompress() failed.");

		uint8_t* jpegBuf = nullptr;
		unsigned long jpegSize = 0;

		if (tjCompress2(compressor, decoded_image_vec.data(), width, 0, height, TJPF_RGB, &jpegBuf, &jpegSize, subsamp, JPG_QUALITY_VAL, flags) != 0) {
    			tjDestroy(compressor);
    			throw std::runtime_error(std::string("tjCompress2: ") + tjGetErrorStr());
		}	
		tjDestroy(compressor);

		std::vector<uint8_t> output_image_vec(jpegBuf, jpegBuf + jpegSize);
		tjFree(jpegBuf);

		image_file_vec.swap(output_image_vec);
		std::vector<uint8_t>().swap(output_image_vec);
		std::vector<uint8_t>().swap(decoded_image_vec);
}

static inline auto erase_app_segment_if_present(std::vector<uint8_t>& v, std::span<const uint8_t> sig) -> void {
	auto pos = find_sig(v, sig);
    	if (!pos) return;
	if (*pos + 3 >= v.size()) return;

    	uint16_t block_len = (static_cast<uint16_t>(v[*pos + 2]) << 8) | static_cast<uint16_t>(v[*pos + 3]);

    	size_t erase_end = *pos + 2 + block_len; 
    	if (erase_end > v.size()) return;       

    	v.erase(v.begin() + *pos, v.begin() + erase_end);
}

int main(int argc, char** argv) {
	try {
		ProgramArgs args = ProgramArgs::parse(argc, argv);
		
		if (!fs::exists(args.image_file_path)) {
        		throw std::runtime_error("Image File Error: File not found.");
    		}
			
		if (!hasValidFilename(args.image_file_path)) {
    			throw std::runtime_error("Invalid Input Error: Unsupported characters in filename arguments.");
		}

		if (!hasFileExtension(args.image_file_path, {".jpg", ".jpeg", ".jfif"})) {
        		throw std::runtime_error("File Type Error: Invalid image extension. Only expecting \".jpg\", \".jpeg\", or \".jfif\".");
    		}
    		
    		if (!fs::exists(args.prompt_file_path)) {
        		throw std::runtime_error("Prompt File Error: File not found.");
    		}
			
		if (!hasValidFilename(args.prompt_file_path)) {
    			throw std::runtime_error("Invalid Input Error: Unsupported characters in filename arguments.");
		}

		if (!hasFileExtension(args.prompt_file_path, {".txt"})) {
        		throw std::runtime_error("File Type Error: Invalid prompt file extension. Only expecting \".txt\".");
    		}
    		
    		if (!fs::exists(args.url_file_path)) {
        		throw std::runtime_error("URL File Error: File not found.");
    		}
			
		if (!hasValidFilename(args.url_file_path)) {
    			throw std::runtime_error("Invalid Input Error: Unsupported characters in filename arguments.");
		}

		if (!hasFileExtension(args.url_file_path, {".txt"})) {
        		throw std::runtime_error("File Type Error: Invalid URL file extension. Only expecting \".txt\".");
    		}
    		
    		
		std::ifstream image_file_ifs(args.image_file_path, std::ios::binary);
		std::ifstream prompt_file_ifs(args.prompt_file_path, std::ios::binary);
		std::ifstream url_file_ifs(args.url_file_path, std::ios::binary);
        	
    		if (!image_file_ifs) {
    			throw std::runtime_error("Read File Error: Unable to read image file. Check the filename and try again.");
   		}
	
		if (!prompt_file_ifs) {
    			throw std::runtime_error("Read File Error: Unable to read prompt text file. Check the filename and try again.");
		}
	
		if (!url_file_ifs) {
			throw std::runtime_error("Read File Error: Unable to read URL text file. Check the filename and try again.");
		}

		uintmax_t 
			image_file_size = fs::file_size(args.image_file_path),
			prompt_file_size = fs::file_size(args.prompt_file_path),
			url_file_size = fs::file_size(args.url_file_path);

		if (!prompt_file_size || !url_file_size) {
        		throw std::runtime_error("File Size Error: A crucial text file is empty!");
    		}

    		constexpr uint8_t MINIMUM_IMAGE_SIZE = 134;

    		if (MINIMUM_IMAGE_SIZE > image_file_size) {
        		throw std::runtime_error("Image File Error: Invalid file size.");
    		}
    	
    		constexpr uintmax_t MAX_IMAGE_SIZE = 5ULL * 1024 * 1024;   
    	
    		if (image_file_size > MAX_IMAGE_SIZE) {
			throw std::runtime_error("File Size Error: Image file exceeds maximum size limit.");
		}
		
		std::vector<uint8_t> image_file_vec(image_file_size);
		std::vector<uint8_t> prompt_file_vec(prompt_file_size);
		std::vector<uint8_t> url_file_vec(url_file_size);
	
		image_file_ifs.read(reinterpret_cast<char*>(image_file_vec.data()), image_file_size);
		image_file_ifs.close();
		
		prompt_file_ifs.read(reinterpret_cast<char*>(prompt_file_vec.data()), prompt_file_size);
		prompt_file_ifs.close();
		
		url_file_ifs.read(reinterpret_cast<char*>(url_file_vec.data()), url_file_size);
		url_file_ifs.close();
		
		constexpr std::array<uint8_t, 2>
			IMAGE_START_SIG	{ 0xFF, 0xD8 },
			IMAGE_END_SIG   { 0xFF, 0xD9 };

		if (!std::equal(IMAGE_START_SIG.begin(), IMAGE_START_SIG.end(), image_file_vec.begin()) || !std::equal(IMAGE_END_SIG.begin(), IMAGE_END_SIG.end(), image_file_vec.end() - 2)) {
    		throw std::runtime_error("Image File Error: This is not a valid JPG image.");
		}

		// For improved compatibility, default re-encode image to JPG Progressive format with a quality value set at 97 with no chroma subsampling,
		// or if Bluesky option, re-encode to standard Baseline format with a quality value set at 85.
	
		// -------------
			
		int img_width = 0, img_height = 0;
		
		encode_image(image_file_vec, img_width, img_height, args.option);
			
		// Remove superfluous segments from cover image. (EXIF, ICC color profile, etc).
		constexpr std::array<uint8_t, 2>
			APP1_EXIF_SIG { 0xFF, 0xE1 }, 
			APP2_ICC_SIG  { 0xFF, 0xE2 }; 

		constexpr std::array<uint8_t, 4>
			DQT1_SIG { 0xFF, 0xDB, 0x00, 0x43 },	// Define Quantization Tables SIG.
			DQT2_SIG { 0xFF, 0xDB, 0x00, 0x84 };
				
		erase_app_segment_if_present(image_file_vec, std::span<const uint8_t>(APP1_EXIF_SIG));
		erase_app_segment_if_present(image_file_vec, std::span<const uint8_t>(APP2_ICC_SIG));

    		auto dqt1 = find_sig(image_file_vec, std::span<const uint8_t>(DQT1_SIG));
    		auto dqt2 = find_sig(image_file_vec, std::span<const uint8_t>(DQT2_SIG));

		if (!dqt1 && !dqt2) {
    			throw std::runtime_error("Image File Error: No DQT segment found (corrupt or unsupported JPEG).");
		}

		const size_t NPOS = static_cast<size_t>(-1);
		size_t dqt_pos = std::min(dqt1.value_or(NPOS), dqt2.value_or(NPOS));
		image_file_vec.erase(image_file_vec.begin(), image_file_vec.begin() + static_cast<std::ptrdiff_t>(dqt_pos));
		
		// ------------
		
		// Color Profile (X-Twitter, Mastodon, Tumblr & Flickr). The vector is inserted into the main default segment vector.
		std::vector<uint8_t>profile_vec {
			0xFF, 0xE2, 0x00, 0x00, 0x49, 0x43, 0x43, 0x5F, 0x50, 0x52, 0x4F, 0x46, 0x49, 0x4C, 0x45, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x21,
			0x2D, 0x2D, 0x04, 0x20, 0x00, 0x00, 0x6D, 0x6E, 0x74, 0x72, 0x52, 0x47, 0x42, 0x20, 0x58, 0x59, 0x5A, 0x20, 0x07, 0xE5, 0x00, 0x04, 0x00, 0x1B,
			0x00, 0x0A, 0x00, 0x1B, 0x00, 0x00, 0x61, 0x63, 0x73, 0x70, 0x4D, 0x53, 0x46, 0x54, 0x00, 0x00, 0x00, 0x00, 0x73, 0x61, 0x77, 0x73, 0x63, 0x74,
			0x72, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0xD6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0xD3, 0x2D, 0x68, 0x61, 0x6E, 0x64, 0x40, 0x92, 0xFF, 0x1E, 0x67, 0x34, 0xB5, 0x6D, 0x00, 0x1C, 0x4E, 0x36, 0x73, 0x3F, 0x4E, 0x71, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x24, 0x63, 0x70, 0x72, 0x74, 0x00, 0x00,
			0x01, 0x20, 0x00, 0x00, 0x00, 0x22, 0x77, 0x74, 0x70, 0x74, 0x00, 0x00, 0x01, 0x44, 0x00, 0x00, 0x00, 0x14, 0x63, 0x68, 0x61, 0x64, 0x00, 0x00,
			0x01, 0x58, 0x00, 0x00, 0x00, 0x2C, 0x72, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x14, 0x67, 0x58, 0x59, 0x5A, 0x00, 0x00,
			0x01, 0x98, 0x00, 0x00, 0x00, 0x14, 0x62, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0xAC, 0x00, 0x00, 0x00, 0x14, 0x72, 0x54, 0x52, 0x43, 0x00, 0x00,
			0x01, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x67, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x62, 0x54, 0x52, 0x43, 0x00, 0x00,
			0x01, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x6D, 0x6C, 0x75, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x65, 0x6E,
			0x55, 0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x41, 0x00, 0x39, 0x00, 0x38, 0x00, 0x43, 0x6D, 0x6C, 0x75, 0x63, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x65, 0x6E, 0x55, 0x53, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x43,
			0x00, 0x43, 0x00, 0x30, 0x00, 0x00, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0xD6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0xD3, 0x2D, 0x73, 0x66, 0x33, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x42, 0x00, 0x00, 0x05, 0xDE, 0xFF, 0xFF, 0xF3, 0x25, 0x00, 0x00,
			0x07, 0x93, 0x00, 0x00, 0xFD, 0x90, 0xFF, 0xFF, 0xFB, 0xA1, 0xFF, 0xFF, 0xFD, 0xA2, 0x00, 0x00, 0x03, 0xDC, 0x00, 0x00, 0xC0, 0x6E, 0x58, 0x59,
			0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x18, 0x00, 0x00, 0x4F, 0xA5, 0x00, 0x00, 0x04, 0xFC, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x34, 0x8D, 0x00, 0x00, 0xA0, 0x2C, 0x00, 0x00, 0x0F, 0x95, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x26, 0x31, 0x00, 0x00, 0x10, 0x2F, 0x00, 0x00, 0xBE, 0x9C, 0x70, 0x61, 0x72, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
			0x33, 0x33, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x41
		};
		
		// If option -b selected. This vector contains the basic EXIF segment required for BlueSky. Color profile not supported by BlueSky.
		// Currently without webpage, user's image prompt & URL; which is inserted later. The contents of segment_vec (not including JPG header) is inserted
		// into this vector.
		std::vector<uint8_t>bluesky_vec {
			0xFF, 0xD8, 0xFF, 0xE1, 0x1A, 0xDC, 0x45, 0x78, 0x69, 0x66, 0x00, 0x00, 0x4D, 0x4D, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x06, 0x01, 0x12,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x1A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1A, 0xA6, 0x01, 0x1B,
			0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1A, 0xAE, 0x01, 0x28, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x3B,
			0x00, 0x02, 0x00, 0x00, 0x1A, 0x4F, 0x00, 0x00, 0x00, 0x56, 0x87, 0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1A, 0xB6, 0x00, 0x00,
			0x00, 0x00, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x6F, 0x6E, 0x20,
			0x74, 0x6F, 0x20, 0x2E, 0x68, 0x74, 0x6D, 0x20, 0x74, 0x6F, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x65, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
			0x20, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x2F, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F,
			0x6E, 0x2E, 0x20, 0x69, 0x6D, 0x67, 0x70, 0x72, 0x6D, 0x74, 0x20, 0x76, 0x32, 0x2E, 0x31, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
			0x62, 0x79, 0x20, 0x4E, 0x69, 0x63, 0x68, 0x6F, 0x6C, 0x61, 0x73, 0x20, 0x43, 0x6C, 0x65, 0x61, 0x73, 0x62, 0x79, 0x20, 0x28, 0x40, 0x43, 0x6C,
			0x65, 0x61, 0x73, 0x62, 0x79, 0x43, 0x6F, 0x64, 0x65, 0x29, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0xA0, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE8, 0xA0, 0x03, 0x00, 0x04, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0xF1, 0x00, 0x00, 0x00, 0x00
		};
		
		// Main segment vector containing JPG header and basic webpage to display user's image prompt. This vector is either inserted into bluesky_vec, if
		// -b option selected (not including JPG header bytes), or profile_vec is inserted into this vector, default (no option selected).
		std::vector<uint8_t>segment_vec {
			0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x2D, 0x2D, 0x3E, 0x3C,
			0x21, 0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x6C, 0x61, 0x6E, 0x67,
			0x3D, 0x22, 0x65, 0x6E, 0x22, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
			0x74, 0x3D, 0x22, 0x75, 0x74, 0x66, 0x2D, 0x38, 0x22, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x76, 0x69,
			0x65, 0x77, 0x70, 0x6F, 0x72, 0x74, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3D, 0x64,
			0x65, 0x76, 0x69, 0x63, 0x65, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2C, 0x20, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x2D, 0x73, 0x63, 0x61,
			0x6C, 0x65, 0x3D, 0x31, 0x22, 0x3E, 0x3C, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x49, 0x4D, 0x47, 0x50, 0x52, 0x4D, 0x54, 0x3C, 0x2F, 0x74, 0x69,
			0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x2D, 0x73, 0x63,
			0x68, 0x65, 0x6D, 0x65, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x64, 0x61, 0x72, 0x6B, 0x20, 0x6C, 0x69, 0x67, 0x68,
			0x74, 0x22, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x72, 0x65, 0x6C, 0x3D, 0x22, 0x70, 0x72, 0x65, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74,
			0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x2E, 0x67, 0x6F,
			0x6F, 0x67, 0x6C, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2E, 0x63, 0x6F, 0x6D, 0x22, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x72, 0x65, 0x6C, 0x3D,
			0x22, 0x70, 0x72, 0x65, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
			0x3A, 0x2F, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x2E, 0x67, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2E, 0x63, 0x6F, 0x6D, 0x22, 0x20, 0x63, 0x72,
			0x6F, 0x73, 0x73, 0x6F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x68, 0x74,
			0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x2E, 0x67, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2E, 0x63,
			0x6F, 0x6D, 0x2F, 0x63, 0x73, 0x73, 0x32, 0x3F, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x3D, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x3A, 0x77, 0x67, 0x68,
			0x74, 0x40, 0x34, 0x30, 0x30, 0x3B, 0x35, 0x30, 0x30, 0x3B, 0x36, 0x30, 0x30, 0x3B, 0x37, 0x30, 0x30, 0x26, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79,
			0x3D, 0x50, 0x6C, 0x75, 0x73, 0x2B, 0x4A, 0x61, 0x6B, 0x61, 0x72, 0x74, 0x61, 0x2B, 0x53, 0x61, 0x6E, 0x73, 0x3A, 0x77, 0x67, 0x68, 0x74, 0x40,
			0x34, 0x30, 0x30, 0x3B, 0x36, 0x30, 0x30, 0x26, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3D, 0x73, 0x77, 0x61, 0x70, 0x22, 0x20, 0x72, 0x65,
			0x6C, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x3E, 0x3C, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3E, 0x64,
			0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x4C, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x65, 0x72,
			0x28, 0x22, 0x44, 0x4F, 0x4D, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x64, 0x22, 0x2C, 0x28, 0x29, 0x3D, 0x3E,
			0x7B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x74,
			0x69, 0x6F, 0x6E, 0x2E, 0x70, 0x61, 0x74, 0x68, 0x6E, 0x61, 0x6D, 0x65, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x66, 0x6E, 0x61, 0x6D, 0x65,
			0x3D, 0x70, 0x61, 0x74, 0x68, 0x2E, 0x73, 0x70, 0x6C, 0x69, 0x74, 0x28, 0x22, 0x2F, 0x22, 0x29, 0x2E, 0x70, 0x6F, 0x70, 0x28, 0x29, 0x3B, 0x64,
			0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x62, 0x6F, 0x64, 0x79, 0x2E, 0x69, 0x6E, 0x6E, 0x65, 0x72, 0x48, 0x54, 0x4D, 0x4C, 0x3D, 0x60,
			0x3C, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x3E, 0x3A, 0x72, 0x6F, 0x6F, 0x74, 0x7B, 0x2D, 0x2D, 0x62, 0x67, 0x2D, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3A,
			0x23, 0x30, 0x38, 0x31, 0x38, 0x32, 0x30, 0x3B, 0x2D, 0x2D, 0x62, 0x67, 0x2D, 0x65, 0x6E, 0x64, 0x3A, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x3B, 0x2D, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x3A, 0x23, 0x65, 0x61, 0x66, 0x30, 0x66, 0x66, 0x3B, 0x2D, 0x2D, 0x6D, 0x75, 0x74, 0x65, 0x64, 0x3A,
			0x23, 0x62, 0x37, 0x63, 0x30, 0x64, 0x36, 0x3B, 0x2D, 0x2D, 0x62, 0x72, 0x61, 0x6E, 0x64, 0x3A, 0x23, 0x38, 0x61, 0x34, 0x63, 0x66, 0x30, 0x3B,
			0x2D, 0x2D, 0x62, 0x72, 0x61, 0x6E, 0x64, 0x2D, 0x32, 0x3A, 0x23, 0x35, 0x35, 0x37, 0x66, 0x64, 0x38, 0x3B, 0x2D, 0x2D, 0x63, 0x61, 0x72, 0x64,
			0x3A, 0x23, 0x30, 0x65, 0x31, 0x66, 0x33, 0x66, 0x3B, 0x2D, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x3A, 0x30, 0x20, 0x31, 0x32, 0x70, 0x78,
			0x20, 0x33, 0x30, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x2E, 0x34, 0x29, 0x2C, 0x30, 0x20, 0x32,
			0x70, 0x78, 0x20, 0x38, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x2E, 0x33, 0x35, 0x29, 0x3B, 0x7D,
			0x68, 0x74, 0x6D, 0x6C, 0x2C, 0x62, 0x6F, 0x64, 0x79, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x3A, 0x30, 0x3B, 0x66, 0x6F, 0x6E, 0x74, 0x2D,
			0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x3A, 0x22, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x22, 0x2C, 0x22, 0x50, 0x6C, 0x75, 0x73, 0x20, 0x4A, 0x61, 0x6B,
			0x61, 0x72, 0x74, 0x61, 0x20, 0x53, 0x61, 0x6E, 0x73, 0x22, 0x2C, 0x22, 0x53, 0x65, 0x67, 0x6F, 0x65, 0x20, 0x55, 0x49, 0x22, 0x2C, 0x73, 0x79,
			0x73, 0x74, 0x65, 0x6D, 0x2D, 0x75, 0x69, 0x2C, 0x2D, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x2D, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2C, 0x52, 0x6F,
			0x62, 0x6F, 0x74, 0x6F, 0x2C, 0x41, 0x72, 0x69, 0x61, 0x6C, 0x2C, 0x73, 0x61, 0x6E, 0x73, 0x2D, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3B, 0x63, 0x6F,
			0x6C, 0x6F, 0x72, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x29, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75,
			0x6E, 0x64, 0x2D, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x62, 0x67, 0x2D, 0x65, 0x6E, 0x64, 0x29, 0x3B, 0x62,
			0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x21, 0x69, 0x6D,
			0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x6D, 0x69, 0x6E, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x30, 0x30, 0x64, 0x76,
			0x68, 0x3B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x66, 0x6C, 0x65, 0x78, 0x3B, 0x66, 0x6C, 0x65, 0x78, 0x2D, 0x64, 0x69, 0x72, 0x65,
			0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x63, 0x6F, 0x6C, 0x75, 0x6D, 0x6E, 0x3B, 0x6F, 0x76, 0x65, 0x72, 0x66, 0x6C, 0x6F, 0x77, 0x2D, 0x78, 0x3A,
			0x68, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x3B, 0x7D, 0x62, 0x6F, 0x64, 0x79, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x3A, 0x30, 0x3B, 0x66, 0x6F,
			0x6E, 0x74, 0x2D, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x3A, 0x22, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x22, 0x2C, 0x22, 0x50, 0x6C, 0x75, 0x73, 0x20,
			0x4A, 0x61, 0x6B, 0x61, 0x72, 0x74, 0x61, 0x20, 0x53, 0x61, 0x6E, 0x73, 0x22, 0x2C, 0x22, 0x53, 0x65, 0x67, 0x6F, 0x65, 0x20, 0x55, 0x49, 0x22,
			0x2C, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2D, 0x75, 0x69, 0x2C, 0x2D, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x2D, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D,
			0x2C, 0x52, 0x6F, 0x62, 0x6F, 0x74, 0x6F, 0x2C, 0x41, 0x72, 0x69, 0x61, 0x6C, 0x2C, 0x73, 0x61, 0x6E, 0x73, 0x2D, 0x73, 0x65, 0x72, 0x69, 0x66,
			0x3B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x29, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67,
			0x72, 0x6F, 0x75, 0x6E, 0x64, 0x3A, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6C, 0x2D, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x31, 0x32,
			0x30, 0x30, 0x70, 0x78, 0x20, 0x38, 0x30, 0x30, 0x70, 0x78, 0x20, 0x61, 0x74, 0x20, 0x32, 0x30, 0x25, 0x20, 0x2D, 0x31, 0x30, 0x25, 0x2C, 0x23,
			0x30, 0x66, 0x32, 0x62, 0x35, 0x61, 0x20, 0x30, 0x25, 0x2C, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x36, 0x30,
			0x25, 0x29, 0x2C, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6C, 0x2D, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x31, 0x30, 0x30, 0x30, 0x70,
			0x78, 0x20, 0x31, 0x30, 0x30, 0x30, 0x70, 0x78, 0x20, 0x61, 0x74, 0x20, 0x31, 0x32, 0x30, 0x25, 0x20, 0x31, 0x30, 0x25, 0x2C, 0x23, 0x30, 0x61,
			0x31, 0x66, 0x34, 0x35, 0x20, 0x30, 0x25, 0x2C, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x35, 0x35, 0x25, 0x29,
			0x2C, 0x6C, 0x69, 0x6E, 0x65, 0x61, 0x72, 0x2D, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x31, 0x38, 0x30, 0x64, 0x65, 0x67, 0x2C,
			0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x62, 0x67, 0x2D, 0x73, 0x74, 0x61, 0x72, 0x74, 0x29, 0x2C, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x62, 0x67,
			0x2D, 0x65, 0x6E, 0x64, 0x29, 0x29, 0x3B, 0x6D, 0x69, 0x6E, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x30, 0x30, 0x64, 0x76, 0x68,
			0x3B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x66, 0x6C, 0x65, 0x78, 0x3B, 0x66, 0x6C, 0x65, 0x78, 0x2D, 0x64, 0x69, 0x72, 0x65, 0x63,
			0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x63, 0x6F, 0x6C, 0x75, 0x6D, 0x6E, 0x3B, 0x7D, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x7B, 0x77, 0x69, 0x64, 0x74,
			0x68, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x3A, 0x32, 0x34, 0x70, 0x78, 0x20, 0x31, 0x36, 0x70, 0x78,
			0x20, 0x38, 0x70, 0x78, 0x20, 0x31, 0x36, 0x70, 0x78, 0x3B, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x61, 0x6C, 0x69, 0x67, 0x6E, 0x3A, 0x63, 0x65, 0x6E,
			0x74, 0x65, 0x72, 0x3B, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x72, 0x65, 0x6C, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3B, 0x7D, 0x68,
			0x31, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x3A, 0x2D, 0x38, 0x70, 0x78, 0x20, 0x30, 0x20, 0x31, 0x36, 0x70, 0x78, 0x20, 0x30, 0x3B, 0x66,
			0x6F, 0x6E, 0x74, 0x2D, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x37, 0x30, 0x30, 0x3B, 0x6C, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2D, 0x73, 0x70,
			0x61, 0x63, 0x69, 0x6E, 0x67, 0x3A, 0x2E, 0x33, 0x70, 0x78, 0x3B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x73, 0x69, 0x7A, 0x65, 0x3A, 0x63, 0x6C, 0x61,
			0x6D, 0x70, 0x28, 0x32, 0x34, 0x70, 0x78, 0x2C, 0x34, 0x2E, 0x35, 0x76, 0x77, 0x2C, 0x34, 0x36, 0x70, 0x78, 0x29, 0x3B, 0x6C, 0x69, 0x6E, 0x65,
			0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x2E, 0x32, 0x3B, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x3A, 0x62, 0x61,
			0x6C, 0x61, 0x6E, 0x63, 0x65, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x3A, 0x6C,
			0x69, 0x6E, 0x65, 0x61, 0x72, 0x2D, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x39, 0x30, 0x64, 0x65, 0x67, 0x2C, 0x23, 0x66, 0x66,
			0x36, 0x62, 0x36, 0x62, 0x20, 0x30, 0x25, 0x2C, 0x23, 0x66, 0x66, 0x39, 0x66, 0x34, 0x33, 0x20, 0x31, 0x32, 0x25, 0x2C, 0x23, 0x66, 0x66, 0x64,
			0x39, 0x33, 0x64, 0x20, 0x32, 0x34, 0x25, 0x2C, 0x23, 0x34, 0x64, 0x64, 0x34, 0x61, 0x30, 0x20, 0x33, 0x36, 0x25, 0x2C, 0x23, 0x32, 0x62, 0x64,
			0x31, 0x66, 0x63, 0x20, 0x34, 0x38, 0x25, 0x2C, 0x20, 0x23, 0x36, 0x61, 0x61, 0x38, 0x66, 0x66, 0x20, 0x36, 0x30, 0x25, 0x2C, 0x23, 0x37, 0x62,
			0x36, 0x31, 0x66, 0x66, 0x20, 0x37, 0x32, 0x25, 0x2C, 0x23, 0x62, 0x33, 0x36, 0x62, 0x66, 0x66, 0x20, 0x38, 0x34, 0x25, 0x2C, 0x23, 0x66, 0x66,
			0x36, 0x62, 0x64, 0x36, 0x20, 0x31, 0x30, 0x30, 0x25, 0x29, 0x3B, 0x2D, 0x77, 0x65, 0x62, 0x6B, 0x69, 0x74, 0x2D, 0x62, 0x61, 0x63, 0x6B, 0x67,
			0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x63, 0x6C, 0x69, 0x70, 0x3A, 0x74, 0x65, 0x78, 0x74, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75,
			0x6E, 0x64, 0x2D, 0x63, 0x6C, 0x69, 0x70, 0x3A, 0x74, 0x65, 0x78, 0x74, 0x3B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73,
			0x70, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x73, 0x69, 0x7A, 0x65, 0x3A, 0x33,
			0x30, 0x30, 0x25, 0x20, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x62, 0x61, 0x63, 0x6B,
			0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2E, 0x33, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73,
			0x65, 0x2C, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x3B, 0x7D, 0x20, 0x68, 0x31, 0x3A,
			0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F,
			0x6E, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x20, 0x30, 0x3B, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x65,
			0x73, 0x73, 0x28, 0x31, 0x2E, 0x30, 0x35, 0x29, 0x3B, 0x7D, 0x68, 0x31, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x62, 0x61, 0x63, 0x6B, 0x67,
			0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x20, 0x30, 0x3B, 0x66, 0x69,
			0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x65, 0x73, 0x73, 0x28, 0x31, 0x2E, 0x30, 0x35, 0x29, 0x3B, 0x7D, 0x68,
			0x31, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74,
			0x69, 0x6F, 0x6E, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x20, 0x30, 0x3B, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
			0x6E, 0x65, 0x73, 0x73, 0x28, 0x31, 0x2E, 0x30, 0x35, 0x29, 0x3B, 0x7D, 0x2E, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7B, 0x64, 0x69, 0x73,
			0x70, 0x6C, 0x61, 0x79, 0x3A, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x3B, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x72, 0x65, 0x6C, 0x61,
			0x74, 0x69, 0x76, 0x65, 0x3B, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x70, 0x78, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75,
			0x6E, 0x64, 0x3A, 0x70, 0x75, 0x72, 0x70, 0x6C, 0x65, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x30, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69,
			0x6E, 0x3A, 0x30, 0x3B, 0x6C, 0x65, 0x66, 0x74, 0x3A, 0x35, 0x30, 0x25, 0x3B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x63, 0x61, 0x6C, 0x63, 0x28,
			0x31, 0x30, 0x30, 0x76, 0x77, 0x20, 0x2B, 0x20, 0x38, 0x70, 0x78, 0x29, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x6C, 0x65, 0x66, 0x74,
			0x3A, 0x63, 0x61, 0x6C, 0x63, 0x28, 0x2D, 0x35, 0x30, 0x76, 0x77, 0x20, 0x2D, 0x20, 0x34, 0x70, 0x78, 0x29, 0x3B, 0x7D, 0x6D, 0x61, 0x69, 0x6E,
			0x7B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x6D, 0x69,
			0x6E, 0x28, 0x31, 0x30, 0x30, 0x30, 0x70, 0x78, 0x2C, 0x39, 0x32, 0x76, 0x77, 0x29, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x69, 0x6E,
			0x6C, 0x69, 0x6E, 0x65, 0x3A, 0x61, 0x75, 0x74, 0x6F, 0x3B, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x61, 0x6C, 0x69, 0x67, 0x6E, 0x3A, 0x63, 0x65, 0x6E,
			0x74, 0x65, 0x72, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x74, 0x6F, 0x70, 0x3A, 0x63, 0x6C, 0x61, 0x6D, 0x70, 0x28, 0x30, 0x76, 0x68,
			0x2C, 0x35, 0x2E, 0x35, 0x76, 0x68, 0x2C, 0x38, 0x2E, 0x35, 0x76, 0x68, 0x29, 0x3B, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x3A, 0x30, 0x20,
			0x31, 0x32, 0x70, 0x78, 0x20, 0x36, 0x34, 0x70, 0x78, 0x20, 0x31, 0x32, 0x70, 0x78, 0x3B, 0x7D, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2D, 0x66,
			0x72, 0x61, 0x6D, 0x65, 0x7B, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x72, 0x65, 0x6C, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3B, 0x64,
			0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x66, 0x6C, 0x65, 0x78, 0x3B, 0x61, 0x6C, 0x69, 0x67, 0x6E, 0x2D, 0x69, 0x74, 0x65, 0x6D, 0x73, 0x3A,
			0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x6A, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x2D, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3A, 0x63,
			0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x69, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x3A, 0x61, 0x75, 0x74, 0x6F,
			0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x6D, 0x69, 0x6E, 0x28, 0x35, 0x39, 0x30, 0x2E, 0x34, 0x70, 0x78, 0x2C, 0x36,
			0x32, 0x2E, 0x39, 0x38, 0x32, 0x76, 0x77, 0x29, 0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x34, 0x35, 0x2E, 0x39,
			0x76, 0x68, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x2D, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x3A, 0x31, 0x38, 0x70, 0x78, 0x3B, 0x62, 0x6F,
			0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x29, 0x3B, 0x6F,
			0x76, 0x65, 0x72, 0x66, 0x6C, 0x6F, 0x77, 0x3A, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x32, 0x70,
			0x78, 0x20, 0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20, 0x73, 0x69, 0x6C, 0x76, 0x65, 0x72, 0x3B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F,
			0x6E, 0x3A, 0x62, 0x6F, 0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x62,
			0x6F, 0x72, 0x64, 0x65, 0x72, 0x2D, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x66, 0x69,
			0x6C, 0x74, 0x65, 0x72, 0x20, 0x2E, 0x32, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x3B, 0x7D, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2D, 0x66, 0x72,
			0x61, 0x6D, 0x65, 0x20, 0x69, 0x6D, 0x67, 0x7B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x3B, 0x6D, 0x61,
			0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A,
			0x31, 0x30, 0x30, 0x25, 0x3B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x61, 0x75, 0x74, 0x6F, 0x3B, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x61,
			0x75, 0x74, 0x6F, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x3A, 0x30, 0x20, 0x61, 0x75, 0x74, 0x6F, 0x3B, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74,
			0x2D, 0x66, 0x69, 0x74, 0x3A, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x7D, 0x2E, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x7B, 0x6D, 0x61,
			0x72, 0x67, 0x69, 0x6E, 0x2D, 0x74, 0x6F, 0x70, 0x3A, 0x32, 0x34, 0x70, 0x78, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x62, 0x6F, 0x74,
			0x74, 0x6F, 0x6D, 0x3A, 0x31, 0x30, 0x70, 0x78, 0x3B, 0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x7B, 0x2D, 0x2D, 0x70, 0x61, 0x64, 0x2D, 0x79, 0x3A, 0x31,
			0x30, 0x70, 0x78, 0x3B, 0x2D, 0x2D, 0x70, 0x61, 0x64, 0x2D, 0x78, 0x3A, 0x31, 0x38, 0x70, 0x78, 0x3B, 0x2D, 0x2D, 0x72, 0x61, 0x64, 0x69, 0x75,
			0x73, 0x3A, 0x39, 0x39, 0x39, 0x70, 0x78, 0x3B, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6E, 0x63, 0x65, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x3B,
			0x63, 0x75, 0x72, 0x73, 0x6F, 0x72, 0x3A, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x75, 0x73, 0x65, 0x72, 0x2D, 0x73, 0x65, 0x6C, 0x65,
			0x63, 0x74, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x3B, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x70, 0x61,
			0x64, 0x2D, 0x79, 0x29, 0x20, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x70, 0x61, 0x64, 0x2D, 0x78, 0x29, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72,
			0x2D, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x3A, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x29, 0x3B, 0x66, 0x6F,
			0x6E, 0x74, 0x2D, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x34, 0x30, 0x30, 0x3B, 0x6C, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2D, 0x73, 0x70, 0x61,
			0x63, 0x69, 0x6E, 0x67, 0x3A, 0x2E, 0x32, 0x70, 0x78, 0x3B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x73, 0x69, 0x7A, 0x65, 0x3A, 0x31, 0x35, 0x70, 0x78,
			0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x3A, 0x6C, 0x69, 0x6E, 0x65, 0x61, 0x72,
			0x2D, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x31, 0x33, 0x35, 0x64, 0x65, 0x67, 0x2C, 0x23, 0x34, 0x65, 0x32, 0x32, 0x61, 0x64,
			0x2C, 0x23, 0x32, 0x62, 0x33, 0x66, 0x38, 0x34, 0x29, 0x3B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x77, 0x68, 0x69, 0x74, 0x65, 0x3B, 0x62, 0x6F,
			0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x3A, 0x30, 0x20, 0x31, 0x30, 0x70, 0x78, 0x20, 0x31, 0x38, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62,
			0x61, 0x28, 0x34, 0x30, 0x2C, 0x35, 0x36, 0x2C, 0x39, 0x34, 0x2C, 0x2E, 0x32, 0x38, 0x29, 0x2C, 0x30, 0x20, 0x34, 0x70, 0x78, 0x20, 0x31, 0x30,
			0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x34, 0x38, 0x2C, 0x32, 0x30, 0x2C, 0x38, 0x38, 0x2C, 0x2E, 0x32, 0x35, 0x29, 0x3B, 0x74, 0x72,
			0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x20, 0x2E, 0x31, 0x35, 0x73, 0x20,
			0x65, 0x61, 0x73, 0x65, 0x2C, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x20, 0x2E, 0x31, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x62, 0x6F,
			0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x20, 0x2E, 0x32, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72,
			0x2D, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2E, 0x32, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75,
			0x6E, 0x64, 0x2D, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x63, 0x6F, 0x6C, 0x6F, 0x72,
			0x20, 0x2E, 0x32, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x20, 0x33, 0x70, 0x78, 0x20, 0x73, 0x6F,
			0x6C, 0x69, 0x64, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6C, 0x65, 0x3B, 0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x62,
			0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x3A, 0x6C, 0x69, 0x6E, 0x65, 0x61, 0x72, 0x2D, 0x67,
			0x72, 0x61, 0x64, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x31, 0x33, 0x35, 0x64, 0x65, 0x67, 0x2C, 0x23, 0x38, 0x62, 0x37, 0x63, 0x66, 0x30, 0x2C, 0x23,
			0x61, 0x34, 0x39, 0x35, 0x66, 0x35, 0x29, 0x3B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x23, 0x31, 0x62, 0x31, 0x62, 0x32, 0x64, 0x3B, 0x66, 0x69,
			0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x65, 0x73, 0x73, 0x28, 0x31, 0x2E, 0x31, 0x32, 0x29, 0x3B, 0x74, 0x72,
			0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x65, 0x59, 0x28, 0x2D, 0x31, 0x70, 0x78, 0x29,
			0x3B, 0x62, 0x6F, 0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x3A, 0x30, 0x20, 0x31, 0x34, 0x70, 0x78, 0x20, 0x32, 0x34, 0x70, 0x78, 0x20,
			0x72, 0x67, 0x62, 0x61, 0x28, 0x34, 0x30, 0x2C, 0x35, 0x36, 0x2C, 0x39, 0x34, 0x2C, 0x2E, 0x33, 0x34, 0x29, 0x2C, 0x30, 0x20, 0x36, 0x70, 0x78,
			0x20, 0x31, 0x34, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x34, 0x38, 0x2C, 0x32, 0x30, 0x2C, 0x38, 0x38, 0x2C, 0x2E, 0x33, 0x29, 0x3B,
			0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x3A, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x7B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x3A, 0x74,
			0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x65, 0x59, 0x28, 0x30, 0x29, 0x3B, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67,
			0x68, 0x74, 0x6E, 0x65, 0x73, 0x73, 0x28, 0x2E, 0x39, 0x34, 0x29, 0x3B, 0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B,
			0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x65, 0x73, 0x73, 0x28, 0x31, 0x2E, 0x30, 0x36, 0x29, 0x3B,
			0x74, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x65, 0x59, 0x28, 0x2D, 0x31, 0x70,
			0x78, 0x29, 0x3B, 0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x3A, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x7B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72,
			0x6D, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x65, 0x59, 0x28, 0x30, 0x29, 0x3B, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x3A, 0x62,
			0x72, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x65, 0x73, 0x73, 0x28, 0x2E, 0x39, 0x35, 0x29, 0x3B, 0x7D, 0x2E, 0x62, 0x74, 0x6E, 0x3A, 0x66, 0x6F, 0x63,
			0x75, 0x73, 0x2D, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6C, 0x65, 0x7B, 0x6F, 0x75, 0x74, 0x6C, 0x69, 0x6E, 0x65, 0x3A, 0x33, 0x70, 0x78, 0x20, 0x73,
			0x6F, 0x6C, 0x69, 0x64, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x31, 0x35, 0x35, 0x2C, 0x39, 0x32, 0x2C, 0x32, 0x35, 0x35, 0x2C, 0x2E, 0x36, 0x29,
			0x3B, 0x6F, 0x75, 0x74, 0x6C, 0x69, 0x6E, 0x65, 0x2D, 0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3A, 0x33, 0x70, 0x78, 0x3B, 0x7D, 0x2E, 0x70, 0x72,
			0x6F, 0x6D, 0x70, 0x74, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x3A, 0x32, 0x34, 0x70, 0x78, 0x20, 0x61, 0x75, 0x74, 0x6F, 0x20, 0x30, 0x20,
			0x61, 0x75, 0x74, 0x6F, 0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x6D, 0x69, 0x6E, 0x28, 0x39, 0x30, 0x30, 0x70, 0x78,
			0x2C, 0x39, 0x32, 0x76, 0x77, 0x29, 0x3B, 0x6C, 0x69, 0x6E, 0x65, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x2E, 0x37, 0x35, 0x3B,
			0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x6D, 0x69, 0x73, 0x74, 0x79, 0x72, 0x6F, 0x73, 0x65, 0x3B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x73, 0x69, 0x7A,
			0x65, 0x3A, 0x63, 0x6C, 0x61, 0x6D, 0x70, 0x28, 0x31, 0x39, 0x70, 0x78, 0x2C, 0x32, 0x2E, 0x31, 0x76, 0x77, 0x2C, 0x32, 0x34, 0x70, 0x78, 0x29,
			0x3B, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x3A, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x3B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69,
			0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x2C, 0x62, 0x61, 0x63,
			0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2E, 0x33, 0x35, 0x73, 0x20, 0x65, 0x61,
			0x73, 0x65, 0x2C, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x20, 0x2E, 0x32, 0x35, 0x73, 0x20, 0x65, 0x61, 0x73, 0x65, 0x3B, 0x7D, 0x66, 0x6F, 0x6F,
			0x74, 0x65, 0x72, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x74, 0x6F, 0x70, 0x3A, 0x61, 0x75, 0x74, 0x6F, 0x3B, 0x70, 0x61, 0x64, 0x64,
			0x69, 0x6E, 0x67, 0x3A, 0x31, 0x34, 0x70, 0x78, 0x20, 0x31, 0x32, 0x70, 0x78, 0x20, 0x33, 0x30, 0x70, 0x78, 0x20, 0x31, 0x32, 0x70, 0x78, 0x3B,
			0x74, 0x65, 0x78, 0x74, 0x2D, 0x61, 0x6C, 0x69, 0x67, 0x6E, 0x3A, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A,
			0x23, 0x63, 0x62, 0x64, 0x32, 0x65, 0x61, 0x3B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x73, 0x69, 0x7A, 0x65, 0x3A, 0x31, 0x38, 0x70, 0x78, 0x3B, 0x66,
			0x6F, 0x6E, 0x74, 0x2D, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x36, 0x30, 0x30, 0x3B, 0x7D, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x20, 0x61,
			0x7B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x23, 0x63, 0x62, 0x64, 0x32, 0x65, 0x61, 0x3B, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x64, 0x65, 0x63, 0x6F,
			0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x2D, 0x62, 0x6F, 0x74, 0x74, 0x6F,
			0x6D, 0x3A, 0x31, 0x70, 0x78, 0x20, 0x64, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x32, 0x30, 0x33, 0x2C, 0x32, 0x31,
			0x30, 0x2C, 0x32, 0x33, 0x34, 0x2C, 0x2E, 0x34, 0x35, 0x29, 0x3B, 0x7D, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x20, 0x61, 0x3A, 0x68, 0x6F, 0x76,
			0x65, 0x72, 0x7B, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x62, 0x75, 0x72, 0x6C, 0x79, 0x77, 0x6F, 0x6F, 0x64, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65,
			0x72, 0x2D, 0x62, 0x6F, 0x74, 0x74, 0x6F, 0x6D, 0x2D, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x3A, 0x72, 0x67, 0x62, 0x61, 0x28, 0x32, 0x32, 0x32, 0x2C,
			0x31, 0x38, 0x34, 0x2C, 0x31, 0x33, 0x35, 0x2C, 0x2E, 0x37, 0x29, 0x3B, 0x7D, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x3E, 0x64, 0x69, 0x76, 0x3A,
			0x6C, 0x61, 0x73, 0x74, 0x2D, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x74, 0x6F, 0x70, 0x3A, 0x32, 0x34,
			0x70, 0x78, 0x3B, 0x7D, 0x2E, 0x62, 0x6F, 0x74, 0x74, 0x6F, 0x6D, 0x2D, 0x73, 0x65, 0x70, 0x7B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x74,
			0x6F, 0x70, 0x3A, 0x35, 0x36, 0x70, 0x78, 0x3B, 0x7D, 0x40, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x28, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74,
			0x68, 0x3A, 0x35, 0x32, 0x30, 0x70, 0x78, 0x29, 0x7B, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x68, 0x31, 0x7B, 0x74, 0x72, 0x61, 0x6E, 0x73,
			0x66, 0x6F, 0x72, 0x6D, 0x3A, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x65, 0x58, 0x28, 0x2D, 0x35, 0x70, 0x78, 0x29, 0x3B, 0x7D, 0x7D,
			0x40, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x28, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x35, 0x32, 0x30, 0x70, 0x78, 0x29, 0x7B,
			0x2E, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x7B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x66, 0x6C, 0x65, 0x78, 0x3B, 0x6A, 0x75,
			0x73, 0x74, 0x69, 0x66, 0x79, 0x2D, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3A, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x7D, 0x2E, 0x62,
			0x74, 0x6E, 0x7B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x69, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x2D, 0x66, 0x6C, 0x65, 0x78, 0x3B, 0x61,
			0x6C, 0x69, 0x67, 0x6E, 0x2D, 0x69, 0x74, 0x65, 0x6D, 0x73, 0x3A, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x6A, 0x75, 0x73, 0x74, 0x69, 0x66,
			0x79, 0x2D, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3A, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x3B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x61,
			0x75, 0x74, 0x6F, 0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x35, 0x34, 0x76, 0x77, 0x3B, 0x70, 0x61, 0x64, 0x64, 0x69,
			0x6E, 0x67, 0x3A, 0x37, 0x70, 0x78, 0x20, 0x31, 0x33, 0x70, 0x78, 0x3B, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2D, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3A,
			0x6E, 0x6F, 0x77, 0x72, 0x61, 0x70, 0x3B, 0x7D, 0x7D, 0x40, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x28, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x2D,
			0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x2D, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x29, 0x7B, 0x2A,
			0x7B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74,
			0x61, 0x6E, 0x74, 0x3B, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x21, 0x69, 0x6D, 0x70, 0x6F,
			0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x7D, 0x7D, 0x2E, 0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x63, 0x6F,
			0x6C, 0x6F, 0x72, 0x3A, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6C, 0x65, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x69,
			0x6D, 0x61, 0x67, 0x65, 0x3A, 0x6E, 0x6F, 0x6E, 0x65, 0x3B, 0x2D, 0x77, 0x65, 0x62, 0x6B, 0x69, 0x74, 0x2D, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72,
			0x6F, 0x75, 0x6E, 0x64, 0x2D, 0x63, 0x6C, 0x69, 0x70, 0x3A, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x3B, 0x7D, 0x2E, 0x69, 0x6D, 0x61, 0x67,
			0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x3A, 0x68, 0x6F, 0x76, 0x65, 0x72, 0x7B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x2D, 0x63, 0x6F, 0x6C,
			0x6F, 0x72, 0x3A, 0x79, 0x65, 0x6C, 0x6C, 0x6F, 0x77, 0x3B, 0x62, 0x6F, 0x78, 0x2D, 0x73, 0x68, 0x61, 0x64, 0x6F, 0x77, 0x3A, 0x30, 0x20, 0x30,
			0x20, 0x30, 0x20, 0x31, 0x2E, 0x35, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28, 0x32, 0x35, 0x35, 0x2C, 0x32, 0x31, 0x32, 0x2C, 0x30, 0x2C,
			0x2E, 0x39, 0x35, 0x29, 0x2C, 0x30, 0x20, 0x30, 0x20, 0x33, 0x36, 0x70, 0x78, 0x20, 0x31, 0x34, 0x70, 0x78, 0x20, 0x72, 0x67, 0x62, 0x61, 0x28,
			0x32, 0x35, 0x35, 0x2C, 0x32, 0x31, 0x32, 0x2C, 0x30, 0x2C, 0x2E, 0x36, 0x29, 0x2C, 0x76, 0x61, 0x72, 0x28, 0x2D, 0x2D, 0x73, 0x68, 0x61, 0x64,
			0x6F, 0x77, 0x29, 0x3B, 0x7D, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x2E, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7B, 0x64, 0x69, 0x73,
			0x70, 0x6C, 0x61, 0x79, 0x3A, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x3B, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x72, 0x65, 0x6C, 0x61,
			0x74, 0x69, 0x76, 0x65, 0x3B, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x31, 0x70, 0x78, 0x3B, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75,
			0x6E, 0x64, 0x3A, 0x70, 0x75, 0x72, 0x70, 0x6C, 0x65, 0x3B, 0x62, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x30, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69,
			0x6E, 0x3A, 0x30, 0x3B, 0x6C, 0x65, 0x66, 0x74, 0x3A, 0x35, 0x30, 0x25, 0x3B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x63, 0x61, 0x6C, 0x63, 0x28,
			0x31, 0x30, 0x30, 0x76, 0x77, 0x20, 0x2B, 0x20, 0x38, 0x70, 0x78, 0x29, 0x3B, 0x6D, 0x61, 0x72, 0x67, 0x69, 0x6E, 0x2D, 0x6C, 0x65, 0x66, 0x74,
			0x3A, 0x63, 0x61, 0x6C, 0x63, 0x28, 0x2D, 0x35, 0x30, 0x76, 0x77, 0x20, 0x2D, 0x20, 0x34, 0x70, 0x78, 0x29, 0x3B, 0x7D, 0x68, 0x65, 0x61, 0x64,
			0x65, 0x72, 0x20, 0x2E, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3A, 0x3A, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x7B, 0x63, 0x6F, 0x6E, 0x74,
			0x65, 0x6E, 0x74, 0x3A, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x3B, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x6E, 0x6F, 0x6E, 0x65,
			0x3B, 0x7D, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3A, 0x3A, 0x61, 0x66, 0x74, 0x65, 0x72, 0x7B, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3A,
			0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x7D, 0x40, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x28,
			0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x6C, 0x61, 0x6E, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x29, 0x20, 0x61,
			0x6E, 0x64, 0x20, 0x28, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x39, 0x30, 0x30, 0x70, 0x78, 0x29, 0x7B, 0x2E, 0x69, 0x6D,
			0x61, 0x67, 0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x7B, 0x6D, 0x61, 0x78, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x36, 0x34, 0x76, 0x77,
			0x3B, 0x6D, 0x61, 0x78, 0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x39, 0x38, 0x64, 0x76, 0x68, 0x3B, 0x7D, 0x2E, 0x69, 0x6D, 0x61, 0x67,
			0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6D, 0x67, 0x7B, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x2D, 0x66, 0x69, 0x74, 0x3A, 0x63,
			0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x3B, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3A, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
			0x3A, 0x31, 0x30, 0x30, 0x25, 0x3B, 0x7D, 0x7D, 0x40, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x28, 0x6D, 0x69, 0x6E, 0x2D, 0x77, 0x69, 0x64, 0x74, 0x68,
			0x3A, 0x39, 0x30, 0x31, 0x70, 0x78, 0x29, 0x7B, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x7B, 0x6D, 0x61, 0x78,
			0x2D, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3A, 0x37, 0x30, 0x76, 0x68, 0x3B, 0x7D, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2D, 0x66, 0x72, 0x61,
			0x6D, 0x65, 0x20, 0x69, 0x6D, 0x67, 0x7B, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x2D, 0x66, 0x69, 0x74, 0x3A, 0x63, 0x6F, 0x76, 0x65, 0x72, 0x3B,
			0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x2D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x35, 0x30, 0x25, 0x20, 0x34, 0x30, 0x25, 0x3B,
			0x7D, 0x7D, 0x3C, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C,
			0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3E, 0x3C, 0x68, 0x31, 0x3E, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x20, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
			0x20, 0x26, 0x61, 0x6D, 0x70, 0x3B, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x3C, 0x2F, 0x68, 0x31, 0x3E, 0x3C,
			0x64, 0x69, 0x76, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x3D, 0x22, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x20, 0x72, 0x6F, 0x6C, 0x65,
			0x3D, 0x22, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2D, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6E,
			0x3D, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3E, 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3E, 0x3C,
			0x6D, 0x61, 0x69, 0x6E, 0x3E, 0x3C, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x3D, 0x22, 0x69, 0x6D, 0x61, 0x67,
			0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x22, 0x3E, 0x3C, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x25, 0x25, 0x55, 0x52, 0x4C, 0x25, 
			0x25, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3D, 0x22, 0x5F, 0x62, 0x6C, 0x61, 0x6E, 0x6B, 0x22, 0x20, 0x72, 0x65, 0x6C, 0x3D, 0x22,
			0x6E, 0x6F, 0x6F, 0x70, 0x65, 0x6E, 0x65, 0x72, 0x20, 0x6E, 0x6F, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x22, 0x3E, 0x3C, 0x69, 0x6D,
			0x67, 0x20, 0x73, 0x72, 0x63, 0x3D, 0x22, 0x24, 0x7B, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x7D, 0x22, 0x20, 0x61, 0x6C, 0x74, 0x3D, 0x22, 0x69, 0x6D,
			0x67, 0x22, 0x3E, 0x3C, 0x2F, 0x61, 0x3E, 0x3C, 0x2F, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x3E, 0x3C, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6C, 0x61,
			0x73, 0x73, 0x3D, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3E, 0x3C, 0x62, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x20, 0x69, 0x64, 0x3D,
			0x22, 0x63, 0x6F, 0x70, 0x79, 0x42, 0x74, 0x6E, 0x22, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x3D, 0x22, 0x62, 0x74, 0x6E, 0x22, 0x20, 0x74, 0x79,
			0x70, 0x65, 0x3D, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2D, 0x6C, 0x69, 0x76, 0x65, 0x3D, 0x22, 0x70,
			0x6F, 0x6C, 0x69, 0x74, 0x65, 0x22, 0x3E, 0x43, 0x6F, 0x70, 0x79, 0x20, 0x50, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x3C, 0x2F, 0x62, 0x75, 0x74, 0x74,
			0x6F, 0x6E, 0x3E, 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x70, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x54, 0x65,
			0x78, 0x74, 0x22, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x3D, 0x22, 0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x22, 0x3E, 0x25, 0x25, 0x50, 0x52, 0x4F,
			0x4D, 0x50, 0x54, 0x25, 0x25, 0x3C, 0x2F, 0x70, 0x3E, 0x3C, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x3E, 0x3C, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x3E,
			0x3C, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x3D, 0x22, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x62, 0x6F, 0x74, 0x74,
			0x6F, 0x6D, 0x2D, 0x73, 0x65, 0x70, 0x22, 0x20, 0x72, 0x6F, 0x6C, 0x65, 0x3D, 0x22, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x22,
			0x20, 0x61, 0x72, 0x69, 0x61, 0x2D, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x3D, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3E, 0x3C, 0x2F, 0x64, 0x69,
			0x76, 0x3E, 0x3C, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x43, 0x6C, 0x65, 0x61, 0x73, 0x62, 0x79, 0x43, 0x6F, 0x64, 0x65, 0x2F, 0x69,
			0x6D, 0x67, 0x70, 0x72, 0x6D, 0x74, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3D, 0x22, 0x5F, 0x62, 0x6C, 0x61, 0x6E, 0x6B, 0x22, 0x20,
			0x72, 0x65, 0x6C, 0x3D, 0x22, 0x6E, 0x6F, 0x6F, 0x70, 0x65, 0x6E, 0x65, 0x72, 0x22, 0x3E, 0x69, 0x6D, 0x67, 0x70, 0x72, 0x6D, 0x74, 0x20, 0x76,
			0x32, 0x2E, 0x31, 0x3C, 0x2F, 0x61, 0x3E, 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x2F, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x3E, 0x60, 0x3B,
			0x28, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x28, 0x29, 0x7B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x62, 0x74, 0x6E, 0x3D, 0x64, 0x6F,
			0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x67, 0x65, 0x74, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x63,
			0x6F, 0x70, 0x79, 0x42, 0x74, 0x6E, 0x22, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6C, 0x3D, 0x64, 0x6F,
			0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x67, 0x65, 0x74, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x70,
			0x72, 0x6F, 0x6D, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x6F, 0x72, 0x69, 0x67, 0x69, 0x6E,
			0x61, 0x6C, 0x3D, 0x62, 0x74, 0x6E, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74,
			0x20, 0x69, 0x6D, 0x67, 0x45, 0x6C, 0x3D, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6C,
			0x65, 0x63, 0x74, 0x6F, 0x72, 0x28, 0x22, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2D, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6D, 0x67, 0x22,
			0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6F, 0x66, 0x20, 0x77, 0x69,
			0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x3D, 0x3D, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x22, 0x26, 0x26, 0x77,
			0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x2E, 0x74, 0x72, 0x69, 0x6D, 0x28, 0x29, 0x29, 0x3F, 0x77, 0x69, 0x6E, 0x64,
			0x6F, 0x77, 0x2E, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x2E, 0x74, 0x72, 0x69, 0x6D, 0x28, 0x29, 0x3A, 0x6E, 0x65, 0x77, 0x20, 0x55, 0x52, 0x4C, 0x53,
			0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x73, 0x28, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x73, 0x65, 0x61,
			0x72, 0x63, 0x68, 0x29, 0x2E, 0x67, 0x65, 0x74, 0x28, 0x22, 0x69, 0x6D, 0x67, 0x22, 0x29, 0x3B, 0x69, 0x66, 0x28, 0x66, 0x6E, 0x61, 0x6D, 0x65,
			0x29, 0x7B, 0x69, 0x6D, 0x67, 0x45, 0x6C, 0x2E, 0x73, 0x72, 0x63, 0x3D, 0x66, 0x6E, 0x61, 0x6D, 0x65, 0x3B, 0x7D, 0x61, 0x73, 0x79, 0x6E, 0x63,
			0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x6F, 0x70, 0x79, 0x54, 0x6F, 0x43, 0x6C, 0x69, 0x70, 0x62, 0x6F, 0x61, 0x72,
			0x64, 0x28, 0x74, 0x65, 0x78, 0x74, 0x29, 0x7B, 0x74, 0x72, 0x79, 0x7B, 0x69, 0x66, 0x28, 0x6E, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6F, 0x72,
			0x2E, 0x63, 0x6C, 0x69, 0x70, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x26, 0x26, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x69, 0x73, 0x53, 0x65, 0x63,
			0x75, 0x72, 0x65, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x29, 0x7B, 0x61, 0x77, 0x61, 0x69, 0x74, 0x20, 0x6E, 0x61, 0x76, 0x69, 0x67, 0x61,
			0x74, 0x6F, 0x72, 0x2E, 0x63, 0x6C, 0x69, 0x70, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x2E, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x28,
			0x74, 0x65, 0x78, 0x74, 0x29, 0x3B, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0x7D, 0x7D, 0x63, 0x61, 0x74, 0x63,
			0x68, 0x28, 0x65, 0x29, 0x7B, 0x7D, 0x74, 0x72, 0x79, 0x7B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x74, 0x61, 0x3D, 0x64, 0x6F, 0x63, 0x75, 0x6D,
			0x65, 0x6E, 0x74, 0x2E, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x28, 0x22, 0x74, 0x65, 0x78, 0x74, 0x61,
			0x72, 0x65, 0x61, 0x22, 0x29, 0x3B, 0x74, 0x61, 0x2E, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x3D, 0x74, 0x65, 0x78, 0x74, 0x3B, 0x74, 0x61, 0x2E, 0x73,
			0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x22, 0x72, 0x65, 0x61, 0x64, 0x6F, 0x6E, 0x6C, 0x79, 0x22, 0x2C, 0x22,
			0x22, 0x29, 0x3B, 0x74, 0x61, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x66, 0x69,
			0x78, 0x65, 0x64, 0x22, 0x3B, 0x74, 0x61, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x74, 0x6F, 0x70, 0x3D, 0x22, 0x31, 0x30, 0x70, 0x78, 0x22,
			0x3B, 0x74, 0x61, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x6C, 0x65, 0x66, 0x74, 0x3D, 0x22, 0x31, 0x30, 0x70, 0x78, 0x22, 0x3B, 0x74, 0x61,
			0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x6F, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x3D, 0x22, 0x30, 0x22, 0x3B, 0x64, 0x6F, 0x63, 0x75, 0x6D,
			0x65, 0x6E, 0x74, 0x2E, 0x62, 0x6F, 0x64, 0x79, 0x2E, 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x28, 0x74, 0x61, 0x29,
			0x3B, 0x74, 0x61, 0x2E, 0x66, 0x6F, 0x63, 0x75, 0x73, 0x28, 0x29, 0x3B, 0x74, 0x61, 0x2E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x28, 0x29, 0x3B,
			0x74, 0x61, 0x2E, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x52, 0x61, 0x6E, 0x67, 0x65, 0x28, 0x30, 0x2C, 0x74,
			0x61, 0x2E, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x2E, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x6F, 0x6B,
			0x3D, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x65, 0x78, 0x65, 0x63, 0x43, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x28, 0x22, 0x63,
			0x6F, 0x70, 0x79, 0x22, 0x29, 0x3B, 0x74, 0x61, 0x2E, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x28, 0x29, 0x3B, 0x69, 0x66, 0x28, 0x6F, 0x6B, 0x29,
			0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0x7D, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x65, 0x29, 0x7B, 0x7D, 0x74,
			0x72, 0x79, 0x7B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x73, 0x70, 0x61, 0x6E, 0x3D, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x63,
			0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x28, 0x22, 0x73, 0x70, 0x61, 0x6E, 0x22, 0x29, 0x3B, 0x73, 0x70, 0x61,
			0x6E, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x74, 0x65, 0x78, 0x74, 0x3B, 0x73, 0x70, 0x61, 0x6E, 0x2E,
			0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x3D, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3B, 0x73,
			0x70, 0x61, 0x6E, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x66, 0x69, 0x78, 0x65,
			0x64, 0x22, 0x3B, 0x73, 0x70, 0x61, 0x6E, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x74, 0x6F, 0x70, 0x3D, 0x22, 0x31, 0x30, 0x70, 0x78, 0x22,
			0x3B, 0x73, 0x70, 0x61, 0x6E, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x6C, 0x65, 0x66, 0x74, 0x3D, 0x22, 0x31, 0x30, 0x70, 0x78, 0x22, 0x3B,
			0x73, 0x70, 0x61, 0x6E, 0x2E, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x2E, 0x6F, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x22, 0x30, 0x22, 0x3B,
			0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x62, 0x6F, 0x64, 0x79, 0x2E, 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x43, 0x68, 0x69, 0x6C,
			0x64, 0x28, 0x73, 0x70, 0x61, 0x6E, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x3D, 0x64, 0x6F, 0x63, 0x75,
			0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6E, 0x67, 0x65, 0x28, 0x29, 0x3B, 0x72, 0x61, 0x6E, 0x67, 0x65,
			0x2E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x4E, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x73, 0x28, 0x73, 0x70, 0x61, 0x6E,
			0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x73, 0x65, 0x6C, 0x3D, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x67, 0x65, 0x74, 0x53, 0x65,
			0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x28, 0x29, 0x3B, 0x73, 0x65, 0x6C, 0x2E, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x41, 0x6C, 0x6C, 0x52,
			0x61, 0x6E, 0x67, 0x65, 0x73, 0x28, 0x29, 0x3B, 0x73, 0x65, 0x6C, 0x2E, 0x61, 0x64, 0x64, 0x52, 0x61, 0x6E, 0x67, 0x65, 0x28, 0x72, 0x61, 0x6E,
			0x67, 0x65, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x6F, 0x6B, 0x32, 0x3D, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x65,
			0x78, 0x65, 0x63, 0x43, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x28, 0x22, 0x63, 0x6F, 0x70, 0x79, 0x22, 0x29, 0x3B, 0x73, 0x65, 0x6C, 0x2E, 0x72,
			0x65, 0x6D, 0x6F, 0x76, 0x65, 0x41, 0x6C, 0x6C, 0x52, 0x61, 0x6E, 0x67, 0x65, 0x73, 0x28, 0x29, 0x3B, 0x73, 0x70, 0x61, 0x6E, 0x2E, 0x72, 0x65,
			0x6D, 0x6F, 0x76, 0x65, 0x28, 0x29, 0x3B, 0x69, 0x66, 0x28, 0x6F, 0x6B, 0x32, 0x29, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x72, 0x75,
			0x65, 0x3B, 0x7D, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x65, 0x29, 0x7B, 0x7D, 0x74, 0x72, 0x79, 0x7B, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E,
			0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x28, 0x22, 0x43, 0x6F, 0x70, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x65, 0x78, 0x74, 0x3A, 0x22,
			0x2C, 0x74, 0x65, 0x78, 0x74, 0x29, 0x3B, 0x7D, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x5F, 0x29, 0x7B, 0x7D, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,
			0x20, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3B, 0x7D, 0x62, 0x74, 0x6E, 0x2E, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x4C, 0x69, 0x73, 0x74,
			0x65, 0x6E, 0x65, 0x72, 0x28, 0x22, 0x63, 0x6C, 0x69, 0x63, 0x6B, 0x22, 0x2C, 0x61, 0x73, 0x79, 0x6E, 0x63, 0x28, 0x29, 0x3D, 0x3E, 0x7B, 0x63,
			0x6F, 0x6E, 0x73, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x3D, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6C, 0x2E, 0x69, 0x6E, 0x6E, 0x65, 0x72, 0x54, 0x65,
			0x78, 0x74, 0x2E, 0x74, 0x72, 0x69, 0x6D, 0x28, 0x29, 0x3B, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x20, 0x6F, 0x6B, 0x3D, 0x61, 0x77, 0x61, 0x69, 0x74,
			0x20, 0x63, 0x6F, 0x70, 0x79, 0x54, 0x6F, 0x43, 0x6C, 0x69, 0x70, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x28, 0x74, 0x65, 0x78, 0x74, 0x29, 0x3B, 0x62,
			0x74, 0x6E, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x6F, 0x6B, 0x3F, 0x22, 0x43, 0x6F, 0x70, 0x69, 0x65,
			0x64, 0x21, 0x22, 0x3A, 0x22, 0x43, 0x6F, 0x70, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x22, 0x3B, 0x62, 0x74, 0x6E, 0x2E, 0x64, 0x69,
			0x73, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x3D, 0x74, 0x72, 0x75, 0x65, 0x3B, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x28, 0x28, 
			0x29, 0x3D, 0x3E, 0x7B, 0x62, 0x74, 0x6E, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x6F, 0x72, 0x69, 0x67,
			0x69, 0x6E, 0x61, 0x6C, 0x3B, 0x62, 0x74, 0x6E, 0x2E, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x3D, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3B,
			0x7D, 0x2C, 0x31, 0x36, 0x30, 0x30, 0x29, 0x3B, 0x7D, 0x29, 0x3B, 0x20, 0x7D, 0x29, 0x28, 0x29, 0x7D, 0x29, 0x3B, 0x3C, 0x2F, 0x73, 0x63, 0x72,
			0x69, 0x70, 0x74, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x3C, 0x73, 0x63, 0x72, 0x69, 0x70,
			0x74, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E
		};
		
		// For X-Twitter, Mastodon, Tumblr, Flickr.
		constexpr uint8_t
			PROFILE_VEC_INTERNAL_DIFF 	= 38,	// Bytes we don't count as part of internal profile size.
			PROFILE_VEC_MAIN_DIFF 	 	= 22,	// Bytes we don't count as part of profile size.
			PROFILE_VEC_INSERT_INDEX 	= 0x14, // Insert location within Default_Vec for the color profile (Segment_Vec). X/Twitter, Mastodon, Tumblr, Flickr.
			PROFILE_VEC_SIZE_FIELD_INDEX 	= 0x28, // Start index location for internal size field of the image color profile.(Max four bytes, only two used).
			SEGMENT_VEC_SIZE_FIELD_INDEX 	= 0x16; // Start index location for size field of the main color profile. (Max two bytes)
		
		uint8_t bits = 16;
		
		if (args.option == Option::None) { 
			segment_vec.insert(segment_vec.begin() + PROFILE_VEC_INSERT_INDEX, profile_vec.begin(), profile_vec.end());
		} else {
			constexpr uint16_t
				BLUESKY_VEC_HEIGHT_INDEX = 0x10D,
				BLUESKY_VEC_WIDTH_INDEX  = 0x101;
				
			update_value(bluesky_vec, BLUESKY_VEC_HEIGHT_INDEX, img_height, bits);
			update_value(bluesky_vec, BLUESKY_VEC_WIDTH_INDEX, img_width, bits);
			
			constexpr uint8_t	
				SEGMENT_VEC_INSERT_INDEX = 0xE3,
				SEGMENT_VEC_START_INDEX =  0x17;
				
			bluesky_vec.insert(bluesky_vec.begin() + SEGMENT_VEC_INSERT_INDEX, segment_vec.begin() + SEGMENT_VEC_START_INDEX, segment_vec.end());
			segment_vec.swap(bluesky_vec);
		}

		// Clear vectors.
		std::vector<uint8_t>().swap(bluesky_vec);
		std::vector<uint8_t>().swap(profile_vec);
		
		constexpr std::array<uint8_t, 10> PROMPT_INSERT_MARKER	{'%','%','P','R','O','M','P','T','%','%'};
		constexpr std::array<uint8_t, 7>  URL_INSERT_MARKER	{'%','%','U','R','L','%','%'};
		
		auto prompt_pos = find_sig(segment_vec, std::span(PROMPT_INSERT_MARKER));
		auto url_pos 	= find_sig(segment_vec, std::span(URL_INSERT_MARKER));

		segment_vec.insert(segment_vec.begin() + *prompt_pos, prompt_file_vec.begin(), prompt_file_vec.end());
		segment_vec.erase(segment_vec.begin() + *prompt_pos + prompt_file_vec.size(), segment_vec.begin() + *prompt_pos + prompt_file_vec.size() + PROMPT_INSERT_MARKER.size());
		
		segment_vec.insert(segment_vec.begin() + *url_pos, url_file_vec.begin(), url_file_vec.end());
		segment_vec.erase(segment_vec.begin() + *url_pos + url_file_vec.size(), segment_vec.begin() + *url_pos + url_file_vec.size() + URL_INSERT_MARKER.size());
		
		std::vector<uint8_t>().swap(prompt_file_vec);
		std::vector<uint8_t>().swap(url_file_vec);
		
		uint32_t segment_size = static_cast<uint32_t>(segment_vec.size());

		if (args.option == Option::Bluesky) {
			segment_size -= 4; // For Bluesky segment size, don't count the JPG ID + APP ID "FFD8FFE1" (4 bytes).
		
			constexpr uint8_t 
				EXIF_SIZE_FIELD_INDEX 		= 0x04,  
				EXIF_XRES_OFFSET_FIELD_INDEX 	= 0x2A,  
				EXIF_YRES_OFFSET_FIELD_INDEX 	= 0x36,  
				EXIF_ARTIST_SIZE_FIELD_INDEX 	= 0x4A,  
				EXIF_SUBIFD_OFFSET_FIELD_INDEX 	= 0x5A;  

			const uint16_t	
				EXIF_XRES_OFFSET   = segment_size - 0x36,
				EXIF_YRES_OFFSET   = segment_size - 0x2E,
				EXIF_SUBIFD_OFFSET = segment_size - 0x26,
				EXIF_ARTIST_SIZE   = segment_size - 0x8C;
				
			updateValue(segment_vec, EXIF_SIZE_FIELD_INDEX , segment_size, bits);
		
			bits = 32;

			updateValue(segment_vec, EXIF_XRES_OFFSET_FIELD_INDEX, EXIF_XRES_OFFSET, bits);
			updateValue(segment_vec, EXIF_YRES_OFFSET_FIELD_INDEX, EXIF_YRES_OFFSET, bits);
			updateValue(segment_vec, EXIF_ARTIST_SIZE_FIELD_INDEX, EXIF_ARTIST_SIZE, bits); 
			updateValue(segment_vec, EXIF_SUBIFD_OFFSET_FIELD_INDEX, EXIF_SUBIFD_OFFSET, bits);
		} else {
			// Update color profile segment size field (FFE2xxxx)
			updateValue(segment_vec, SEGMENT_VEC_SIZE_FIELD_INDEX, segment_size - PROFILE_VEC_MAIN_DIFF, bits);

			// Update internal color profile size field
			updateValue(segment_vec, PROFILE_VEC_SIZE_FIELD_INDEX, segment_size - PROFILE_VEC_INTERNAL_DIFF, bits);
		}	

		image_file_vec.insert(image_file_vec.begin(), segment_vec.begin(), segment_vec.end());
		std::vector<uint8_t>().swap(segment_vec); // Clear

		image_file_size = static_cast<uint32_t>(image_file_vec.size());

		std::random_device rd;
    		std::mt19937 gen(rd());
    		std::uniform_int_distribution<> dist(10000, 99999);
	
		const std::string OUTPUT_FILENAME = "imgprmt_" + std::to_string(dist(gen)) + ".jpg";

		std::ofstream write_file_fs(OUTPUT_FILENAME, std::ios::binary);
		if (!write_file_fs) {
			throw std::runtime_error("Write Error: Unable to write to file. Make sure you have WRITE permissions for this location.");
		}

		write_file_fs.write(reinterpret_cast<const char*>(image_file_vec.data()), image_file_size);
		
		std::vector<uint8_t>().swap(image_file_vec);
		std::cout << "\nCreated output file: " + OUTPUT_FILENAME + " " << image_file_size << " " << "Bytes\n\n";
		return 0;
	}
	catch (const std::runtime_error& e) {
        	std::cerr << "\n" << e.what() << "\n\n";
        	return 1;
    	}
}
